Description: Declaring wordsize in tests and in xor_other leads to declaration of
two instances. Change the var name in tests.
Author: Nilesh Patra <nilesh@debian.org>
Last-Update: 2022-08-06
--- a/xor_test.go
+++ b/xor_test.go
@@ -76,43 +76,43 @@
 	}
 }
 
-const wordSize = int(unsafe.Sizeof(uintptr(0)))
+const wordSizeTest = int(unsafe.Sizeof(uintptr(0)))
 
 func TestBytes8Align(t *testing.T) {
 
 	rand.Seed(time.Now().UnixNano())
 
 	for j := 0; j < 1024; j++ {
-		a := make([]byte, 8+wordSize)
-		b := make([]byte, 8+wordSize)
-		dst0 := make([]byte, 8+wordSize)
-		dst1 := make([]byte, 8+wordSize)
+		a := make([]byte, 8+wordSizeTest)
+		b := make([]byte, 8+wordSizeTest)
+		dst0 := make([]byte, 8+wordSizeTest)
+		dst1 := make([]byte, 8+wordSizeTest)
 
 		al := alignment(a)
 		offset := 0
 		if al != 0 {
-			offset = wordSize - al
+			offset = wordSizeTest - al
 		}
 		a = a[offset : offset+8]
 
 		al = alignment(b)
 		offset = 0
 		if al != 0 {
-			offset = wordSize - al
+			offset = wordSizeTest - al
 		}
 		b = b[offset : offset+8]
 
 		al = alignment(dst0)
 		offset = 0
 		if al != 0 {
-			offset = wordSize - al
+			offset = wordSizeTest - al
 		}
 		dst0 = dst0[offset : offset+8]
 
 		al = alignment(dst1)
 		offset = 0
 		if al != 0 {
-			offset = wordSize - al
+			offset = wordSizeTest - al
 		}
 		dst1 = dst1[offset : offset+8]
 
@@ -132,7 +132,7 @@
 }
 
 func alignment(s []byte) int {
-	return int(uintptr(unsafe.Pointer(&s[0])) & uintptr(wordSize-1))
+	return int(uintptr(unsafe.Pointer(&s[0])) & uintptr(wordSizeTest-1))
 }
 
 func TestBytes16Align(t *testing.T) {
@@ -140,36 +140,36 @@
 	rand.Seed(time.Now().UnixNano())
 
 	for j := 0; j < 1024; j++ {
-		a := make([]byte, 16+wordSize)
-		b := make([]byte, 16+wordSize)
-		dst0 := make([]byte, 16+wordSize)
-		dst1 := make([]byte, 16+wordSize)
+		a := make([]byte, 16+wordSizeTest)
+		b := make([]byte, 16+wordSizeTest)
+		dst0 := make([]byte, 16+wordSizeTest)
+		dst1 := make([]byte, 16+wordSizeTest)
 
 		al := alignment(a)
 		offset := 0
 		if al != 0 {
-			offset = wordSize - al
+			offset = wordSizeTest - al
 		}
 		a = a[offset : offset+16]
 
 		al = alignment(b)
 		offset = 0
 		if al != 0 {
-			offset = wordSize - al
+			offset = wordSizeTest - al
 		}
 		b = b[offset : offset+16]
 
 		al = alignment(dst0)
 		offset = 0
 		if al != 0 {
-			offset = wordSize - al
+			offset = wordSizeTest - al
 		}
 		dst0 = dst0[offset : offset+16]
 
 		al = alignment(dst1)
 		offset = 0
 		if al != 0 {
-			offset = wordSize - al
+			offset = wordSizeTest - al
 		}
 		dst1 = dst1[offset : offset+16]
 
